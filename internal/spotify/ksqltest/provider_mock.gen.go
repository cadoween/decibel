// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vingarcia/ksql (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -typed -package ksqltest -destination ksqltest/provider_mock.gen.go github.com/vingarcia/ksql Provider
//

// Package ksqltest is a generated GoMock package.
package ksqltest

import (
	context "context"
	reflect "reflect"

	ksql "github.com/vingarcia/ksql"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProvider) Delete(ctx context.Context, table ksql.Table, idOrRecord any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, table, idOrRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProviderMockRecorder) Delete(ctx, table, idOrRecord any) *MockProviderDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProvider)(nil).Delete), ctx, table, idOrRecord)
	return &MockProviderDeleteCall{Call: call}
}

// MockProviderDeleteCall wrap *gomock.Call
type MockProviderDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderDeleteCall) Return(arg0 error) *MockProviderDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderDeleteCall) Do(f func(context.Context, ksql.Table, any) error) *MockProviderDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderDeleteCall) DoAndReturn(f func(context.Context, ksql.Table, any) error) *MockProviderDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockProvider) Exec(ctx context.Context, query string, params ...any) (ksql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(ksql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockProviderMockRecorder) Exec(ctx, query any, params ...any) *MockProviderExecCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, params...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockProvider)(nil).Exec), varargs...)
	return &MockProviderExecCall{Call: call}
}

// MockProviderExecCall wrap *gomock.Call
type MockProviderExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderExecCall) Return(arg0 ksql.Result, arg1 error) *MockProviderExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderExecCall) Do(f func(context.Context, string, ...any) (ksql.Result, error)) *MockProviderExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderExecCall) DoAndReturn(f func(context.Context, string, ...any) (ksql.Result, error)) *MockProviderExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Insert mocks base method.
func (m *MockProvider) Insert(ctx context.Context, table ksql.Table, record any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, table, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockProviderMockRecorder) Insert(ctx, table, record any) *MockProviderInsertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProvider)(nil).Insert), ctx, table, record)
	return &MockProviderInsertCall{Call: call}
}

// MockProviderInsertCall wrap *gomock.Call
type MockProviderInsertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderInsertCall) Return(arg0 error) *MockProviderInsertCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderInsertCall) Do(f func(context.Context, ksql.Table, any) error) *MockProviderInsertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderInsertCall) DoAndReturn(f func(context.Context, ksql.Table, any) error) *MockProviderInsertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockProvider) Patch(ctx context.Context, table ksql.Table, record any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, table, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockProviderMockRecorder) Patch(ctx, table, record any) *MockProviderPatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockProvider)(nil).Patch), ctx, table, record)
	return &MockProviderPatchCall{Call: call}
}

// MockProviderPatchCall wrap *gomock.Call
type MockProviderPatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderPatchCall) Return(arg0 error) *MockProviderPatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderPatchCall) Do(f func(context.Context, ksql.Table, any) error) *MockProviderPatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderPatchCall) DoAndReturn(f func(context.Context, ksql.Table, any) error) *MockProviderPatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *MockProvider) Query(ctx context.Context, records any, query string, params ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, records, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockProviderMockRecorder) Query(ctx, records, query any, params ...any) *MockProviderQueryCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, records, query}, params...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockProvider)(nil).Query), varargs...)
	return &MockProviderQueryCall{Call: call}
}

// MockProviderQueryCall wrap *gomock.Call
type MockProviderQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderQueryCall) Return(arg0 error) *MockProviderQueryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderQueryCall) Do(f func(context.Context, any, string, ...any) error) *MockProviderQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderQueryCall) DoAndReturn(f func(context.Context, any, string, ...any) error) *MockProviderQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryChunks mocks base method.
func (m *MockProvider) QueryChunks(ctx context.Context, parser ksql.ChunkParser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryChunks", ctx, parser)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryChunks indicates an expected call of QueryChunks.
func (mr *MockProviderMockRecorder) QueryChunks(ctx, parser any) *MockProviderQueryChunksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryChunks", reflect.TypeOf((*MockProvider)(nil).QueryChunks), ctx, parser)
	return &MockProviderQueryChunksCall{Call: call}
}

// MockProviderQueryChunksCall wrap *gomock.Call
type MockProviderQueryChunksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderQueryChunksCall) Return(arg0 error) *MockProviderQueryChunksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderQueryChunksCall) Do(f func(context.Context, ksql.ChunkParser) error) *MockProviderQueryChunksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderQueryChunksCall) DoAndReturn(f func(context.Context, ksql.ChunkParser) error) *MockProviderQueryChunksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryOne mocks base method.
func (m *MockProvider) QueryOne(ctx context.Context, record any, query string, params ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, record, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryOne indicates an expected call of QueryOne.
func (mr *MockProviderMockRecorder) QueryOne(ctx, record, query any, params ...any) *MockProviderQueryOneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, record, query}, params...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockProvider)(nil).QueryOne), varargs...)
	return &MockProviderQueryOneCall{Call: call}
}

// MockProviderQueryOneCall wrap *gomock.Call
type MockProviderQueryOneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderQueryOneCall) Return(arg0 error) *MockProviderQueryOneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderQueryOneCall) Do(f func(context.Context, any, string, ...any) error) *MockProviderQueryOneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderQueryOneCall) DoAndReturn(f func(context.Context, any, string, ...any) error) *MockProviderQueryOneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Transaction mocks base method.
func (m *MockProvider) Transaction(ctx context.Context, fn func(ksql.Provider) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockProviderMockRecorder) Transaction(ctx, fn any) *MockProviderTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockProvider)(nil).Transaction), ctx, fn)
	return &MockProviderTransactionCall{Call: call}
}

// MockProviderTransactionCall wrap *gomock.Call
type MockProviderTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderTransactionCall) Return(arg0 error) *MockProviderTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderTransactionCall) Do(f func(context.Context, func(ksql.Provider) error) error) *MockProviderTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderTransactionCall) DoAndReturn(f func(context.Context, func(ksql.Provider) error) error) *MockProviderTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
